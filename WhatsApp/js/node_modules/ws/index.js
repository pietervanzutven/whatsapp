require((exports, module) => {

    const EventEmitter = require('events')

    class ws extends EventEmitter {
        constructor(url, protocols, options) {
            super();

            this.url = Windows.Foundation.Uri(url);
            this.socket = new Windows.Networking.Sockets.MessageWebSocket();
            this.socket.setRequestHeader("origin", options.origin);
            for (const header in options.headers) {
                this.socket.setRequestHeader(header, options.headers[header]);
            }

            this.open = async function () {
                await this.socket.connectAsync(this.url);
                this.emit("open");
            }

            this.send = async function (message) {
                try {
                    const dataWriter = Windows.Storage.Streams.DataWriter(this.socket.outputStream);
                    if (typeof message === "string") {
                        this.socket.control.messageType = Windows.Networking.Sockets.SocketMessageType.utf8;
                        dataWriter.writeString(message);
                    } else {
                        this.socket.control.messageType = Windows.Networking.Sockets.SocketMessageType.binary;
                        dataWriter.writeBytes(message);
                    }
                    await dataWriter.storeAsync();
                    await dataWriter.flushAsync();
                    dataWriter.detachStream();
                } catch (error) {
                    this.emit("error", error);
                }
            }

            this.close = this.socket.close;

            this.socket.onmessagereceived = function (event) {
                try {
                    const dataReader = event.getDataReader();
                    let result;
                    if (event.messageType == Windows.Networking.Sockets.SocketMessageType.binary) {
                        let array = new Uint8Array(dataReader.unconsumedBufferLength);
                        dataReader.readBytes(array);
                        result = Buffer.from(array);
                    } else if (event.messageType == Windows.Networking.Sockets.SocketMessageType.utf8) {
                        dataReader.unicodeEncoding = Windows.Storage.Streams.UnicodeEncoding.utf8;
                        result = dataReader.readString(dataReader.unconsumedBufferLength);
                    } else {
                        throw "Socket receive error: unknown message type";
                    }
                    this.emit("message", result);
                } catch (error) {
                    this.emit("error", error);
                }
            }.bind(this);

            this.socket.onclosed = function () {
                this.emit("close");
            }.bind(this);

            this.socket.onerror = function (event) {
                this.emit("error", event);
            }.bind(this);

            this.open();
        }
    }

    module.exports = ws;
});