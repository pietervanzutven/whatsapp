require((exports,module) => {

    class ws {
        constructor(url, protocols, options) {
            this.url = Windows.Foundation.Uri(url);
            this.socket = new Windows.Networking.Sockets.MessageWebSocket();
            this.socket.setRequestHeader("origin", options.origin);
            for (const header in options.headers) {
                this.socket.setRequestHeader(header, options.headers[header]);
            }
            this.socket.onmessagereceived = function (event) {
                try {
                    const dataReader = event.getDataReader();
                    let result;
                    if (event.messageType == Windows.Networking.Sockets.SocketMessageType.binary) {
                        const buffer = dataReader.readBuffer(dataReader.unconsumedBufferLength);
                        const array = Windows.Security.Cryptography.CryptographicBuffer.copyToByteArray(buffer);
                        result = Buffer.from(array);
                    } else if (event.messageType == Windows.Networking.Sockets.SocketMessageType.utf8) {
                        dataReader.unicodeEncoding = Windows.Storage.Streams.UnicodeEncoding.utf8;
                        result = dataReader.readString(dataReader.unconsumedBufferLength);
                    } else {
                        throw "Socket receive error: unknown message type";
                    }
                    this.onmessage(result);
                } catch (error) {
                    this.onerror(error);
                }
            }.bind(this);
            this.socket.onclosed = function () {
                this.onclose();
            }.bind(this);
            this.on = async function (type, callback) {
                this["on" + type] = callback;
                if (type === "open") {
                    try {
                        await this.socket.connectAsync(this.url);
                        this.onopen();
                    } catch (error) {
                        this.onerror(error);
                    }
                }
            }
            this.once = this.on;
            this.removeAllListeners = function (type) {
                this.socket['on' + type] = null;
                return this;
            }
            this.close = this.socket.close;
            this.send = async function (message) {
                try {
                    const dataWriter = Windows.Storage.Streams.DataWriter(this.socket.outputStream);
                    if (typeof message === "string") {
                        this.socket.control.messageType = Windows.Networking.Sockets.SocketMessageType.utf8;
                        dataWriter.writeString(message);
                    } else {
                        this.socket.control.messageType = Windows.Networking.Sockets.SocketMessageType.binary;
                        const buffer = Windows.Security.Cryptography.CryptographicBuffer.createFromByteArray(message);
                        dataWriter.writeBuffer(buffer);
                    }
                    await dataWriter.storeAsync();
                    dataWriter.detachStream();
                } catch (error) {
                    this.onerror(error);
                }
            }
        }
    }

    module.exports = ws;
});