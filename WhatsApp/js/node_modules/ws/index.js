require((exports, module) => {

    const EventEmitter = require('events')

    class ws extends EventEmitter {
        constructor(url, protocols, options) {
            super();

            this.CONNECTING = 0;
            this.OPEN = 1;
            this.CLOSING = 2;
            this.CLOSED = 3;

            this.readyState = this.CONNECTING;
            this.socket = new WebSocket(url);
            this.socket.binaryType = "arraybuffer";

            this.socket.onopen = function (event) {
                this.readyState = this.OPEN;
                this.emit("open");
            }.bind(this);

            this.socket.onerror = function (error) {
                this.emit("error", error);
            }.bind(this);

            this.socket.onmessage = function (event) {
                const result = Buffer.from(event.data);
                this.emit("message", result);
            }.bind(this);

            this.socket.onclose = function (event) {
                this.readyState = this.CLOSED;
                this.emit("close");
            }.bind(this);

            this.send = function (message, callback) {
                try {
                    this.socket.send(message);
                    if (callback) {
                        callback(false, true);
                    }
                } catch (error) {
                    this.emit("error", error);
                }
            }

            this.close = () => {
                this.readyState = this.CLOSING;
                this.socket.close;
            }
        }
    }

    module.exports = ws;
});